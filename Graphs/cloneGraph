# class : val, neighbors = []

    
#constructor:
self.diary = {}

def cloneGraph(self, node):
    if not node:
        return None

    if node in self.diary[node]:
        return self.diary[node]

    new_node = Node(node.val)
    self.diary[node] = new_node

    new_node.neighbors = []

    for n in node.neighbors:
        new_node.neighbors.apppend(self.cloneGraph(n))


    return new_node

    ----------------------------------------------------------------------------------

"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':
        if not node:
            return node
        
        diary = {node: Node(node.val)}
        stack = [node]
        
        while stack:
            n = stack.pop()
            for neigh in n.neighbors:
                if neigh not in diary:
                    stack.append(neigh)
                    diary[neigh] = Node(neigh.val)
                    
                diary[n].neighbors.append(diary[neigh])
                
        return diary[node]