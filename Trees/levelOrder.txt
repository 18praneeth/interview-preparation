def levelOrder(self, root):
    if root == None:
        return

    result = ""  #ask what to do with result

    q = deque()
    q.append(root)
    q.append(None)

    while len(q) != 0:
        t = q.popleft()
        result += str(t.val) + " "
        print(str(t.val), end=" ")

        if t.left:
            q.append(t.left)

        if t.right:
            q.append(t.right)

        if q[0] == None:
            result += "\n"
            print("\n")
            q.popleft()
            
            if len(q) != 0:
                q.append(None)


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        if not root:
            return root
        
        result = []
        
        q = deque([root])
        
        while q:
            qLen = len(q)
            level = []
            
            for i in range(qLen):
                node = q.popleft()
                
                if node:
                    level.append(node.val)
                    
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
                    
            result.append(level)
            
        return result
            